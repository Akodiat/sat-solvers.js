--- btormain.c	2013-11-11 16:51:40.750027339 -0800
+++ btormain.c	2013-11-13 14:06:55.525909016 -0800
@@ -1408,3 +1408,208 @@
     }
   return return_val;
 }
+
+const char*
+solve_string (const char * problem, int format)
+{
+  BtorMainApp app;
+  int sat_result = 0;
+  int i = 0;
+  int root_len;
+  const char *parse_error = 0;
+  Btor *btor = 0;
+  BtorAIGMgr *amgr = 0;
+  BtorAIGVecMgr *avmgr = 0;
+  BtorSATMgr *smgr = 0;
+  BtorParseResult parse_res;
+  const BtorParserAPI *parser_api = 0;
+  BtorParser *parser = 0;
+  BtorParseOpt parse_opt;
+  BtorMemMgr *mem = 0;
+  BtorNode *root;
+  BtorCharStack prefix;
+
+  btor_static_start_time = btor_time_stamp ();
+
+  memset (&app, 0, sizeof app);
+
+  app.verbosity = 0;
+  app.incremental = 0;
+  app.indepth = 0;
+  app.lookahead = 0;
+  app.interval = 0;
+  app.output_file = stdout;
+  app.close_output_file = 0;
+  app.input_file = stdin;
+  app.input_file_name = "<stdin>";
+  app.close_input_file = 0;
+  //app.argc = argc;
+  //app.argv = argv;
+  app.argpos = 0;
+  app.done = 0;
+  app.err = 0;
+  app.basis = BTOR_BINARY_BASIS;
+  app.dump_exp = 0;
+  app.dump_smt = 0;
+  app.rewrite_level = 3;
+  app.force_smt_input = format;
+  app.print_model = 1;
+  app.forced_sat_solver_name = 0;
+  app.forced_sat_solvers = 0;
+#ifdef BTOR_USE_PICOSAT
+  app.force_picosat = 0;
+#endif
+#ifdef BTOR_USE_LINGELING
+  app.force_lingeling = 0;
+  app.lingeling_options = 0;
+#endif
+#ifdef BTOR_USE_MINISAT
+  app.force_minisat = 0;
+#endif
+  btor_static_set_alarm = -1;
+
+  //if (!app.done && !app.err)
+    {
+      parse_opt.need_model = app.print_model;
+
+      BTOR_INIT_STACK (prefix);
+
+      btor_static_btor = btor = btor_new_btor ();
+      btor_set_rewrite_level_btor (btor, app.rewrite_level);
+
+      //if (app.print_model)
+	btor_enable_model_gen (btor);
+
+      btor_set_verbosity_btor (btor, app.verbosity);
+      mem = btor->mm;
+
+      avmgr = btor->avmgr;
+      amgr = btor_get_aig_mgr_aigvec_mgr (avmgr);
+      btor_static_smgr = smgr = btor_get_sat_mgr_aig_mgr (amgr);
+
+      //btor_set_sig_handlers ();
+      if (app.force_smt_input == 1) {
+	parser_api = btor_smt_parser_api ();
+      } else if (app.force_smt_input == 2) {
+	parser_api = btor_smt2_parser_api ();
+      } else {
+        app.err = 1;
+	goto DONE;
+      }
+
+      parser = parser_api->init (btor, &parse_opt);
+
+      if (!setup_sat (&app, smgr))
+	goto DONE;
+
+      btor_init_sat (smgr);
+      btor_set_output_sat (smgr, stdout);
+
+      if ((parse_error = parser_api->parse (parser,
+						 &prefix,
+						 (FILE *) problem,
+						 app.input_file_name,
+						 &parse_res)))
+	{
+	  fprintf (app.output_file, "%s\n", parse_error);
+	  app.err = 1;
+	}
+      else if (parse_res.nregs > 0)
+	{
+	  fprintf (app.output_file, 
+	           "*** removed support for sequential models\n");
+	  app.err = 1;
+	}
+      else
+	{
+	  if (parse_res.logic == BTOR_LOGIC_QF_BV)
+	    {
+	      smgr->inc_required = 0;
+	    }
+	  else
+	    {
+	      assert (parse_res.logic == BTOR_LOGIC_QF_AUFBV);
+	      assert (smgr->inc_required);
+	      smgr->inc_required = 1;
+	    }
+
+	  if (parse_res.nregs > 0)
+	    {
+	      fprintf (app.output_file,
+		"** removed support for sequential models\n");
+	      app.err = 1;
+	    }
+	  else
+	    {
+	      for (i = 0; i < parse_res.noutputs; i++)
+		{
+		  root = parse_res.outputs[i];
+		  root_len = btor_get_exp_len (btor, root);
+		  assert (root_len >= 1);
+		  if (root_len > 1)
+		    root = btor_redor_exp (btor, root);
+		  else
+		    root = btor_copy_exp (btor, root);
+		  btor_add_constraint_exp (btor, root);
+		  btor_release_exp (btor, root);
+		}
+
+	      sat_result = btor_sat_btor (btor);
+	      assert (sat_result != BTOR_UNKNOWN);
+
+	      /* check if status is equal to benchmark status */
+	      if (sat_result == BTOR_SAT &&
+		  parse_res.status == BTOR_PARSE_SAT_STATUS_UNSAT) {
+		fprintf (app.output_file,
+		  "[btormain] ERROR: "
+		  "'sat' but status of benchmark in '%s' is 'unsat'\n",
+		  app.input_file_name);
+	      } else if (sat_result == BTOR_UNSAT &&
+		       parse_res.status == BTOR_PARSE_SAT_STATUS_SAT) {
+		fprintf (app.output_file,
+		  "[btormain] ERROR: "
+		  "'unsat' but status of benchmark in '%s' is 'sat'\n",
+		  app.input_file_name);
+	      } else
+		print_sat_result (&app, sat_result);
+	    }
+
+	  if (sat_result == BTOR_SAT && app.print_model)
+	    print_assignment (&app, btor, &parse_res);
+
+	  /*if (app.verbosity > 0)
+	    {
+	      btor_print_stats_sat (smgr);
+	      btor_print_stats_btor (btor);
+            }*/
+	}
+
+      btor_static_smgr = 0;
+      btor_reset_sat (smgr);
+DONE:
+      if (parser_api)
+	{
+	  assert (parser);
+	  parser_api->reset (parser);
+	}
+
+      /*if (!app.err && !app.done && app.verbosity > 0)
+	btor_print_static_stats ();*/
+
+      btor_static_btor = 0;
+      btor_static_verbosity = 0;
+      BTOR_RELEASE_STACK (mem, prefix);
+      btor_delete_btor (btor);
+
+      //btor_reset_sig_handlers ();
+    }
+
+  if (sat_result == BTOR_UNSAT)
+    return "UNSAT";
+  else if (sat_result == BTOR_SAT)
+    return "SAT";
+  else if (app.err)
+    return "ERROR";
+  else
+    return "UNK";
+}
--- btorsmt.c	2012-05-29 05:30:13.000000000 -0700
+++ btorsmt.c	2013-08-27 15:22:34.983407713 -0700
@@ -227,6 +227,9 @@
   BtorNodePtrStack inputs;
   BtorNodePtrStack outputs;
   BtorNodePtrStack window;
+
+  const char * problem;
+  int problemIndex;
 };
 
 /*------------------------------------------------------------------------*/
@@ -868,7 +871,9 @@
   else
     {
       parser->bytes++;
-      res = getc (parser->file);
+      res = parser->problem[parser->problemIndex++];
+      if (res == '\0')
+        res = EOF;
     }
 
   if (res == '\n')
@@ -3198,6 +3203,9 @@
   parser->lineno = 1;
   parser->saved = 0;
 
+  parser->problem = (char *)file;
+  parser->problemIndex = 0;
+
   BTOR_CLR (res);
 
   res->status = BTOR_PARSE_SAT_STATUS_UNKNOWN;
--- btorsmt2.c	2013-11-11 16:51:40.750027339 -0800
+++ btorsmt2.c	2013-11-12 17:19:24.336490146 -0800
@@ -250,6 +250,8 @@
     int all, set_logic, asserts, check_sat, exits;
   } commands;
   int binding;
+  const char* problem;
+  int problemIndex;
 } BtorSMT2Parser;
 
 static char * btor_perr_smt2 (BtorSMT2Parser * parser, const char * fmt, ...) {
@@ -305,7 +307,11 @@
   else if (parser->prefix &&
 	   parser->nprefix < BTOR_COUNT_STACK (*parser->prefix))
     res = parser->prefix->start[parser->nprefix++];
-  else res = getc (parser->file);
+  else {
+    res = parser->problem[parser->problemIndex++];
+    if (res == '\0')
+      res = EOF;
+  }
   if (res == '\n') parser->lineno++;
   return res;
 }
@@ -2127,6 +2133,8 @@
   parser->saved = 0;
   BTOR_CLR (res);
   parser->res = res;
+  parser->problem = (char *)file;
+  parser->problemIndex = 0;
   while (btor_read_command_smt2 (parser))
     ;
   if (parser->error) return parser->error;
